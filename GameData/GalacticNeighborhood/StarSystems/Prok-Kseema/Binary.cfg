@Kopernicus:FINAL
{

// INSTRUCTIONS:
// Copy this cfg anywhere into the GameData folder
// Set the name of the two bodies you want to turn into a binary system plus the reference body

	@Body[Prok]          // Put here the name of the heavies body (eg: Pluto)
	{
		SigmaBinary = Primary    // Don't change this line
	}
	@Body[Kseema]            // Put here the name of the lightest body (eg: Charon)
	{
		SigmaBinary = Secondary  // Don't change this line
	}

// Now sit back and enjoy your binary system

// Sigma



  ////////////////////////////////////////////
 // You don't need to read past this point //
////////////////////////////////////////////



// This part creates the barycenter

	Body
	{
		SigmaBinary = Barycenter
		name = #$/Body:HAS[#SigmaBinary[Primary]]/name$$/Body:HAS[#SigmaBinary[Secondary]]/name$
		Template
		{
			name = Jool
		}
		Properties
		{
			radius = 1
			rotates = false
			rotationPeriod = 0
		}
		#/Body:HAS[#SigmaBinary[Primary]]/Orbit {}
		@Orbit
		{
			@color = 0.7,0.575,0.4,1.0
		}
		Atmosphere
		{
			enabled = false
		}
		ScaledVersion
		{
			type = Vacuum
			fadeStart = 0
			fadeEnd = 0
			Material
			{
				texture = GalacticNeighborhood/Textures/blank
				shininess = 0
			}
		}
		Debug
		{
			exportBin = false
		}
	}

// This part sets the Primary body

	@Body:HAS[#SigmaBinary[Primary]]
	{
		@Properties
		{
			%solarRotationPeriod = false
		}
		@Orbit
		{

			// Set orbital parameters

			@referenceBody = #$/Body:HAS[#SigmaBinary[Barycenter]]/name$
			%inclination = #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/inclination$
			%eccentricity = #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/eccentricity$
			%longitudeOfAscendingNode = #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/longitudeOfAscendingNode$
			%argumentOfPeriapsis = #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/argumentOfPeriapsis$
			@argumentOfPeriapsis += 180
			%meanAnomalyAtEpoch = #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/meanAnomalyAtEpoch$
			%epoch = #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/epoch$

			// Set new semiMajorAxis

			%semiMajorAxis = #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
			@semiMajorAxis += #$../Properties/mass$
			@semiMajorAxis != -1
			@semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
			@semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
		}
	}

// This part shrinks the SoI of the Secondary body when it's too big
// If the original body have the SoI already explicitly set, this part won't change anything

	@Body:HAS[#SigmaBinary[Secondary]]
	{
		@Properties:HAS[~sphereOfInfluence[]]
		{
			%sphereOfInfluence = #$mass$
			@sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$
			@sphereOfInfluence != 0.4
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			%maxSoI = 1
		}
		@Properties:HAS[#maxSoI[1]]
		{
			@maxSoI -= #$../Orbit/eccentricity$
			@maxSoI *= #$../Orbit/semiMajorAxis$
			@maxSoI -= #$radius$
			@maxSoI -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/radius$
			@maxSoI /= 2
			@maxSoI += #$radius$
			@maxSoI -= #$sphereOfInfluence$
		}
		@Properties:HAS[#maxSoI[<0]]
		{
			@sphereOfInfluence += #$maxSoI$
		}
	}

// This part sets Barycenter's mass, description and SoI

	@Body:HAS[#SigmaBinary[Barycenter]]
	{
		@Properties
		{
			description = #This is the Barycenter of the $/Body:HAS[#SigmaBinary[Primary]]/name$-$/Body:HAS[#SigmaBinary[Secondary]]/name$ System.

			// Set mass

			%mass = #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$
			@mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
			@mass != 3
			@mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$

			// Set Sphere of Influence

			%sphereOfInfluence = #$/Body:HAS[#SigmaBinary[Primary]]/Properties/sphereOfInfluence$
		}
	}

// This part sets the final SoI value for the Primary Body

	@Body:HAS[#SigmaBinary[Primary]]
	{
		@Properties
		{
			%sphereOfInfluence = #$../Orbit/eccentricity$
			@sphereOfInfluence += 1
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			@sphereOfInfluence += #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/sphereOfInfluence$
		}
	}

// This part cleans temporary stuff

	@Body:HAS[#SigmaBinary[*]]
	{
		!SigmaBinary = DEL
		@Properties
		{
			!maxSoI = DEL
		}
	}
}