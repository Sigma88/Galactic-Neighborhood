// change NEED/AFTER
// change +Body[]

@Kopernicus:NEEDS[SystemGNBinaries]:AFTER[SystemGNBinaries]
{
	
	// INSTRUCTIONS:
	// Copy this cfg anywhere into the GameData folder
	// Set the name of the two bodies you want to turn into a binary system plus the reference body
	
	@Body[Algok?A]
	{
		SigmaBinary = Primary    // Don't change this line
	}
	@Body[Algok?B]
	{
		SigmaBinary = Secondary  // Don't change this line
	}
	@Body[PARENT_NAME]
	{
		SigmaBinary = Reference  // Don't change this line
	}
	
}

// Now sit back and enjoy your binary system

// Sigma



  ////////////////////////////////////////////
 // You don't need to read past this point //
////////////////////////////////////////////



// This part checks for a Finalize node inside Kopernicus

@Kopernicus:HAS[@Finalize]:NEEDS[SystemGNBinaries]:AFTER[SystemGNBinaries]
{
	@Finalize:HAS[#finalizeOrbits[?rue]]
	{
		SigmaFinalize = True
	}
	@Finalize:HAS[~finalizeOrbits[?rue]]
	{
		SigmaFinalize = False
	}
}
@Kopernicus:HAS[!Finalize]:NEEDS[SystemGNBinaries]:AFTER[SystemGNBinaries]
{
	Finalize
	{
		SigmaFinalize = False
		removeFinalize = True
	}
}

// This part creates the barycenter

@Kopernicus:NEEDS[SystemGNBinaries]:AFTER[SystemGNBinaries]
{
	+Body[SystemGNBarycenter]
	{
		SigmaBinary = Barycenter
		@name = #$/Body:HAS[#SigmaBinary[Primary]]/name$$/Body:HAS[#SigmaBinary[Secondary]]/name$
		#/Body:HAS[#SigmaBinary[Primary]]/Orbit {}
		flightGlobalsIndex = 1000
		@Properties
		{
			SigmaFinalize = #$/Finalize/SigmaFinalize$
		}
	}
	
// This part sets the Primary body
	
	@Body:HAS[#SigmaBinary[Primary]]
	{
		@Properties
		{
			%solarRotationPeriod = false
			SigmaFinalize = #$/Finalize/SigmaFinalize$
		}

		// Calculate the temporary SoI (only if it's not already explicitly set)

		@Properties:HAS[~sphereOfInfluence[*]]
		{
			sphereOfInfluence = #$mass$
			@sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$
			@sphereOfInfluence != 0.4
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			minSoI = 1
		}
		
		// Fixes the SoI if it's too small
		
		@Properties:HAS[#minSoI[1]]
		{
			@minSoI = #$radius$
			@minSoI *= 2
			@minSoI -= #$radius$
			@minSoI -= 40000			
		}
		@Properties:[#minSoI[>0]|#minSoI[0]]
		{
			@minSoI += #$radius$
			@minSoI += 40000	
		}
		@Properties:HAS[#minSoI[<0]]
		{
			%minSoI = #$radius$
			@minSoI *= 2
		}
		@Properties
		{
			@minSoI -= #$sphereOfInfluence$
		}
		@Properties:HAS[#minSoI[>0]]
		{
			@sphereOfInfluence += #$minSoI$
		}
		
		// Set orbital parameters
		
		!Orbit {}
		#/Body:HAS[#SigmaBinary[Secondary]]/Orbit {}
		@Orbit
		{
			@color = #$/Body:HAS[#SigmaBinary[Barycenter]]/Orbit/color$
			@referenceBody = #$/Body:HAS[#SigmaBinary[Barycenter]]/name$
			@argumentOfPeriapsis += 180
			
			// Set new semiMajorAxis
			
			%semiMajorAxis = #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
			@semiMajorAxis += #$../Properties/mass$
			@semiMajorAxis != -1
			@semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
			@semiMajorAxis *= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
		}
	}
	
	// This part changes the SoI of the Secondary body when it's too small or too big
	// If the original body have the SoI already explicitly set, this part won't change anything
	
	@Body:HAS[#SigmaBinary[Secondary]]
	{
		@Properties:HAS[~sphereOfInfluence[*]]
		{
			%sphereOfInfluence = #$mass$
			@sphereOfInfluence /= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$
			@sphereOfInfluence != 0.4
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			%maxSoI = 1
			%minSoI = 1
		}
		@Properties:HAS[#minSoI[1]]
		{
			@minSoI = #$radius$
			@minSoI *= 2
			@minSoI -= #$radius$
			@minSoI -= 40000			
		}
		@Properties:[#minSoI[>0]|#minSoI[0]]
		{
			@minSoI += #$radius$
			@minSoI += 40000	
		}
		@Properties:HAS[#minSoI[<0]]
		{
			%minSoI = #$radius$
			@minSoI *= 2
		}
		@Properties
		{
			@minSoI -= #$sphereOfInfluence$
		}
		@Properties:HAS[#minSoI[>0]]
		{
			@sphereOfInfluence += #$minSoI$
		}
		@Properties:HAS[#maxSoI[1]]
		{
			@maxSoI -= #$../Orbit/eccentricity$
			@maxSoI *= #$../Orbit/semiMajorAxis$
			@maxSoI -= #$radius$
			@maxSoI -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/radius$
			@maxSoI /= 2
			@maxSoI += #$radius$
			@maxSoI -= #$sphereOfInfluence$
		}
		@Properties:HAS[#maxSoI[<0]]
		{
			@sphereOfInfluence += #$maxSoI$
		}
	}
	
	// This part sets Barycenter's mass, description and SoI
	
	@Body:HAS[#SigmaBinary[Barycenter]]
	{
		@Properties:HAS[#SigmaFinalize[?rue]]
		{
			@mass += #$/Body:HAS[#SigmaBinary[Secondary]]/Properties/mass$
		}
		@Properties
		{
			
			// Set description
			
			description = #This is the Barycenter of the $/Body:HAS[#SigmaBinary[Primary]]/name$-$/Body:HAS[#SigmaBinary[Secondary]]/name$ System.
			
			// Set mass
			
			@mass += #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$
			@mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$
			@mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$
			@mass *= #$/Body:HAS[#SigmaBinary[Primary]]/Orbit/semiMajorAxis$
			@mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
			@mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
			@mass /= #$/Body:HAS[#SigmaBinary[Secondary]]/Orbit/semiMajorAxis$
			
			// Set Sphere of Influence
			
			%sphereOfInfluence = #$/Body:HAS[#SigmaBinary[Primary]]/Properties/sphereOfInfluence$
		}
		@Properties:HAS[#SigmaFinalize[?rue]]
		{
			@mass -= #$/Body:HAS[#SigmaBinary[Primary]]/Properties/mass$
		}
	}
	
	// This part:
	// Sets the final SoI value for the Primary Body
	// Calculates the correct rotation period if the body is tidallyLocked
	
	@Body:HAS[#SigmaBinary[Primary]]
	{
		
		// Set final SoI value
		
		@Properties
		{
			%sphereOfInfluence = #$../Orbit/eccentricity$
			@sphereOfInfluence += 1
			@sphereOfInfluence *= #$../Orbit/semiMajorAxis$
			@sphereOfInfluence += #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/sphereOfInfluence$
		}
		
		// If tidallyLocked fix the rotationPeriod
		
		@Properties:HAS[#tidallyLocked[?rue]]
		{
			%rotationPeriod = 0
		}		
		@Properties:HAS[#tidallyLocked[?rue],#SigmaFinalize[?rue]]
		{
			@rotationPeriod += #$/Body:HAS[#SigmaBinary[Barycenter]]/Properties/mass$
		}
		@Properties:HAS[#tidallyLocked[?rue]]
		{
			!tidallyLocked = DEL
			%rotates = true
			@rotationPeriod += #$/Body:HAS[#SigmaBinary[Reference]]/Properties/mass$
			@rotationPeriod /= #$../Orbit/semiMajorAxis$
			@rotationPeriod /= #$../Orbit/semiMajorAxis$
			@rotationPeriod /= #$../Orbit/semiMajorAxis$
			@rotationPeriod /= 5.91525585920849e11 // divide by (4*pi^2)/G
			@rotationPeriod != -0.5
		}
	}
}

// This part adds an exception for ISRU contracts on the barycenter

@Contracts:NEEDS[SystemGNBinaries]:AFTER[SystemGNBinaries]
{
	@ISRU
	{
		@RESOURCE_REQUEST[Ore]
		{
			Forbidden = #$@Kopernicus/Body:HAS[#SigmaBinary[Barycenter]]/name$
		}
	}
}

// This part clears temporary stuff

@Kopernicus:NEEDS[SystemGNBinaries]:AFTER[SystemGNBinaries]
{
	@Body:HAS[#SigmaBinary[*]]
	{
		!SigmaBinary = DEL
		@Properties
		{
			!minSoI = DEL
			!maxSoI = DEL
			!SigmaFinalize = DEL
		}
	}
	@Finalize:HAS[#SigmaFinalize[*]]
	{
		!SigmaFinalize = DEL
	}
	!Finalize:HAS[#removeFinalize[*]] {}
}